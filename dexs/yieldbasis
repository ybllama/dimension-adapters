import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";

// YieldBasis LEVAMM contracts for each BTC market
const LEVAMM_CONTRACTS = {
  cbBTC: '0xB42e34Bf1f8627189e099ABDB069B9D73B521E4F',
  WBTC: '0xa25306937dbA98378c32F167588F5Dc17A95c94b',
  tBTC: '0xb0faaBE84076c6330A9642a6400e87CE4cAec9d4'
} as const;

// Token addresses for volume tracking
const TOKENS = {
  crvUSD: '0xf939e0a03fb07f59a73314e73794be0e57ac1b4e',
  cbBTC: '0xcbB7C0000aB88B473b1f5aFd9ef808440eed33Bf',
  WBTC: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
  tBTC: '0x18084fbA666a33d37592fA2633fD49a74DD93a88'
} as const;

// TokenExchange event from LEVAMM contracts
const TOKEN_EXCHANGE_EVENT = "event TokenExchange(address indexed buyer, uint256 sold_id, uint256 tokens_sold, uint256 bought_id, uint256 tokens_bought, uint256 fee, uint256 price_oracle)";

interface TokenExchangeLog {
  buyer: string;
  sold_id: bigint;
  tokens_sold: bigint;
  bought_id: bigint;
  tokens_bought: bigint;
  fee: bigint;
  price_oracle: bigint;
}

const fetch = async (options: FetchOptions) => {
  const dailyVolume = options.createBalances();

  // Map LEVAMM address to its collateral token
  const levammToCollateral: Record<string, string> = {
    [LEVAMM_CONTRACTS.cbBTC]: TOKENS.cbBTC,
    [LEVAMM_CONTRACTS.WBTC]: TOKENS.WBTC,
    [LEVAMM_CONTRACTS.tBTC]: TOKENS.tBTC,
  };

  // Fetch TokenExchange events from all three LEVAMM contracts
  const levammAddresses = Object.values(LEVAMM_CONTRACTS);

  for (const levammAddress of levammAddresses) {
    const logs: TokenExchangeLog[] = await options.getLogs({
      target: levammAddress,
      eventAbi: TOKEN_EXCHANGE_EVENT,
    });

    logs.forEach((log) => {
      // In LEVAMM, sold_id indicates which token was sold:
      // sold_id = 0 means crvUSD was sold (user buying collateral/BTC)
      // sold_id = 1 means collateral/BTC was sold (user buying crvUSD)
      
      if (log.sold_id === 0n) {
        // User sold crvUSD, bought BTC - count the crvUSD sold as volume
        dailyVolume.add(TOKENS.crvUSD, log.tokens_sold);
      } else if (log.sold_id === 1n) {
        // User sold BTC, bought crvUSD - count the BTC sold as volume
        const collateralToken = levammToCollateral[levammAddress];
        if (collateralToken) {
          dailyVolume.add(collateralToken, log.tokens_sold);
        }
      }
    });
  }

  return {
    dailyVolume,
  };
};

const adapter: SimpleAdapter = {
  version: 2,
  adapter: {
    [CHAIN.ETHEREUM]: {
      fetch,
      start: '2024-09-13', // YieldBasis launch date
      meta: {
        methodology: {
          Volume: "Trading volume through the YieldBasis leveraged AMM pools, aggregated across all three BTC markets (cbBTC, WBTC, tBTC). Volume is measured by the tokens_sold amount in each TokenExchange event from the LEVAMM contracts. Each swap is counted once based on the input token amount to avoid double-counting.",
        }
      }
    }
  }
};

export default adapter;
